{"version":3,"sources":["icons/user.svg","icons/PI.svg","icons/plus.svg","icons/close.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","labels","React","useState","tokens","data","dataState","a","axios","url","method","then","response","useEffect","fetch","className","href","target","src","PILogo","alt","UserLogo","PlusLogo","style","height","width","map","row","i","key","l","j","CloseLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,6RCsF5BC,MA5Ef,WACE,IAAIC,EAAS,CAAC,WAAW,QAAQ,OAAO,MAAM,QADjC,EAEUC,IAAMC,SAAS,CACpCC,OAAO,KAHI,mBAERC,EAFQ,KAEHC,EAFG,iDAMb,sBAAAC,EAAA,sEACQC,IAAM,CACVC,IAAI,wCACJC,OAAO,QACNC,MAAK,SAAAC,GACNN,EAAU,CACRF,OAAOQ,EAASP,KAAKD,YAN3B,4CANa,sBAqBb,OAJAF,IAAMW,WAAU,YAjBH,mCAkBXC,KACA,IAGA,iCACI,yBAAKC,UAAU,qBAGf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,uBAAGC,KAAK,uBAAuBC,OAAO,KACpC,yBAAKC,IAAKC,IAAQC,IAAI,WAG1B,yBAAKL,UAAU,QACb,yBAAKG,IAAKG,IAAUD,IAAI,WAG5B,yBAAKL,UAAU,QACb,yBAAKA,UAAU,YACX,yBAAKG,IAAKI,IAAUF,IAAI,YAAYG,MAAO,CAACC,OAAO,OAAOC,MAAM,WAEnEpB,EAAKD,OAAOsB,KAAI,SAACC,EAAIC,GACpB,OACE,yBAAKb,UAAU,OAAOc,IAAKD,GAEvB3B,EAAOyB,KAAI,SAACI,EAAEC,GACZ,OACE,yBAAKhB,UAAU,MAAMc,IAAKE,GACxB,yBAAKhB,UAAU,aACZe,GAEH,yBAAKf,UAAU,aAAf,KAGA,yBAAKA,UAAU,cACZY,EAAIG,QAMf,yBAAKf,UAAU,aACb,yBAAKG,IAAKc,IAAWZ,IAAI,QAAQG,MAAO,CAACC,OAAO,iBAO5D,yBAAKT,UAAU,aCnEHkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c177b8e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.9e1f7ce7.svg\";","module.exports = __webpack_public_path__ + \"static/media/PI.0d51bc57.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.1921b0a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.a4d59ca1.svg\";","import React from 'react';\nimport axios from 'axios';\n\nimport UserLogo from './icons/user.svg';\nimport PILogo from './icons/PI.svg';\nimport PlusLogo from './icons/plus.svg';\nimport CloseLogo from './icons/close.svg';\n\nimport './App.css';\n\nfunction App() {\n  let labels = ['filename','token','type','md5','time']\n  let [data,dataState] = React.useState({\n    tokens:[]\n  })\n\n  async function fetch(){\n    await axios({\n      url:\"http://localhost:2121/file/GET_TOKENS\",\n      method:\"GET\",\n    }).then(response=>{\n      dataState({\n        tokens:response.data.tokens\n      })\n    })\n  }\n\n  React.useEffect(()=>{\n    fetch()\n  },[])\n\n  return (\n    <section>\n        <div className=\"notification-bar\">\n\n        </div>\n        <div className=\"container\">\n          <div className=\"nav-bar\">\n            <div className='logo'>\n              <a href=\"http://transferpi.tk\" target=\"#\">\n                <img src={PILogo} alt=\"Logo\" />\n              </a>\n            </div>\n            <div className='logo'>\n              <img src={UserLogo} alt=\"Logo\" />\n            </div>\n          </div>\n          <div className=\"tron\">\n            <div className=\"card new\">\n                <img src={PlusLogo} alt=\"plus-logo\" style={{height:\"64px\",width:\"64px\"}} />\n            </div>\n            {data.tokens.map((row,i)=>{\n              return (\n                <div className=\"card\" key={i}>\n                  {\n                    labels.map((l,j)=>{\n                      return (\n                        <div className=\"row\" key={j}>\n                          <div className=\"col label\">\n                            {l}\n                          </div>\n                          <div className=\"col colon\">\n                            :\n                          </div>\n                          <div className=\"col values\">\n                            {row[l]}\n                          </div>\n                        </div>\n                      )\n                    })\n                  }\n                  <div className=\"close-btn\">\n                    <img src={CloseLogo} alt=\"close\" style={{height:\"20px\"}} />\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n        <div className=\"footer\">\n\n        </div>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}